2 == 2. , True

!= , not equal
>=,<=

ORDER
**
*,/,//,%
+,-
<,<=,>,>=
==,!=

CONDITIONS

if true_or_not:
    do_this_if_true
    
if the_weather_is_good:
    go_for_a_walk()
elif tickets_are_available:
    go_to_the_theater()
else:
    play_chess_at_home()
    
 else might be omitted

if number1 > number2: larger_number = number1
else: larger_number = number2


TAX calculator
income = float(input("Enter the annual income: "))
if income <= 85528:
    tax = 0.18 * income - 556.02
elif income > 85528:
    tax = 14839.02 + 0.32 * (income-85528)

if tax < 0:
    tax = 0
    
 tax = round(tax, 0)
print("The tax is:", tax, "thalers")
    
    

RECURSION

while conditional_expression:
    instruction_one
    instruction_two
    instruction_three
    :
    :
    instruction_n
    
for i in range(100):  ///range starts from 0
    # do_something()
    pass
    
for i in range(2, 8, 2): //////// 2 is first value, 8 will not be assigned (will stop at 7), 2 is step
    print("The value of i is currently", i)
 
for i in range(1,6):
    print(i , "Mississippi")
    
break - exits the loop immediately, and unconditionally ends the loop's operation; the program begins to execute the nearest instruction after the loop's body;
continue - behaves as if the program has suddenly reached the end of the body; the next turn is started and the condition expression is tested immediately.

print("\nThe continue instruction:")
for i in range(1, 6):
    if i == 3:
        continue
    print("Inside the loop.", i)
print("Outside the loop.")


PROGRAM TO USE CONTINUE,REMOVE VOWELS FROM WORDS
user_word=(input("Please provide a word: \n"))
user_word = user_word.upper()

for letter in user_word:
    # Complete the body of the for loop.
    if letter == 'A' or letter == 'E' or letter == 'I' or letter == 'O' or letter == 'U' :
        continue
    print (letter)


As you may have suspected, loops may have the else branch too, like ifs.
The loop's else branch is always executed once, regardless of whether the loop has entered its body or not.

GIVEN A NUMBER, calculate height of pyramid where each layer has +1 brick than below
blocks = int(input("Enter the number of blocks: "))
height=0
while (blocks > 0):
    if (blocks>=height+1):
        height+=1
        blocks-=height
    else:
        break
print("The height of the pyramid:", height)


BOOLEAN OPERATORS
    LOGICAL
and,or,not . MUST use integers, not floats
    BITWISE
& (ampersand) - bitwise conjunction;
| (bar) - bitwise disjunction;
~ (tilde) - bitwise negation;
^ (caret) - bitwise exclusive or (xor).

Binary left and right shift
    The shift operators in Python are a pair of digraphs: << and >>
    The left argument of these operators is an integer value whose bits are shifted. 
    The right argument determines the size of the shift.
    17 << 2 translates to 17 * 4
    
LISTS
    numbers = [10, 5, 7, 2, 1]
     list is a collection of elements, but each element is a scalar
     length of list, len()
     print("\nList length:", len(numbers))
     del numbers[1]
     print(numbers[-1]). Index -1 == last element of list, -2 second from end etc
     
 FUNCTIONS vs METHODS
 A method is a specific kind of function
 A function doesn't belong to any data - it gets data, it may create new data and it (generally) produces a result.
 A method does all these things, but is also able to change the state of a selected entity 
 A method is owned by the data it works for, while a function is owned by the whole code.
 result = data.method(arg)
list.append() = puts an element at list of list
list.insert(location,value) = inserts value in location

SWAP
variable_1 = 1
variable_2 = 2
variable_1, variable_2 = variable_2, variable_1
     
     
     
    
